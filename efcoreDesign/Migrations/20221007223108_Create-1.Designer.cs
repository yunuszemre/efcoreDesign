// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using efcoreDesign.DAL.Context;

#nullable disable

namespace efcoreDesign.Migrations
{
    [DbContext(typeof(DesignContext))]
    [Migration("20221007223108_Create-1")]
    partial class Create1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("efcoreDesign.DAL.Entity.Brand", b =>
                {
                    b.Property<int>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BrandId"), 1L, 1);

                    b.Property<string>("BrandName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("BrandId");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            BrandId = 1,
                            BrandName = "BMW"
                        },
                        new
                        {
                            BrandId = 2,
                            BrandName = "Mercedes"
                        },
                        new
                        {
                            BrandId = 3,
                            BrandName = "Hyundai"
                        },
                        new
                        {
                            BrandId = 4,
                            BrandName = "Volkswagen"
                        },
                        new
                        {
                            BrandId = 5,
                            BrandName = "Ford"
                        },
                        new
                        {
                            BrandId = 6,
                            BrandName = "Volvo"
                        });
                });

            modelBuilder.Entity("efcoreDesign.DAL.Entity.Road", b =>
                {
                    b.Property<int>("RoadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoadId"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("RoadName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("RoadTypeId")
                        .HasColumnType("int");

                    b.HasKey("RoadId");

                    b.HasIndex("RoadTypeId");

                    b.ToTable("Roads");
                });

            modelBuilder.Entity("efcoreDesign.DAL.Entity.RoadType", b =>
                {
                    b.Property<int>("RoadTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoadTypeId"), 1L, 1);

                    b.Property<string>("RoadTypeName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("RoadTypeId");

                    b.ToTable("RoadTypes");
                });

            modelBuilder.Entity("efcoreDesign.DAL.Entity.RoadVehicle", b =>
                {
                    b.Property<int>("RoadId")
                        .HasColumnType("int");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("RoadId", "VehicleId");

                    b.HasIndex("VehicleId");

                    b.ToTable("RoadVehicles");
                });

            modelBuilder.Entity("efcoreDesign.DAL.Entity.Vehicle", b =>
                {
                    b.Property<int>("VehicleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleId"), 1L, 1);

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("VehicleTypeId")
                        .HasColumnType("int");

                    b.HasKey("VehicleId");

                    b.HasIndex("BrandId");

                    b.HasIndex("VehicleTypeId");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("efcoreDesign.DAL.Entity.VehicleModel", b =>
                {
                    b.Property<int>("VehicleModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleModelId"), 1L, 1);

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.Property<string>("VehicleModelName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("VehicleModelId");

                    b.HasIndex("BrandId");

                    b.HasIndex("VehicleId")
                        .IsUnique();

                    b.ToTable("VehicleModels");
                });

            modelBuilder.Entity("efcoreDesign.DAL.Entity.VehicleType", b =>
                {
                    b.Property<int>("VehicleTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleTypeId"), 1L, 1);

                    b.Property<string>("VehicleTypeName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("VehicleTypeId");

                    b.ToTable("VehicleTypes");
                });

            modelBuilder.Entity("efcoreDesign.DAL.Entity.Road", b =>
                {
                    b.HasOne("efcoreDesign.DAL.Entity.RoadType", "RoadType")
                        .WithMany("Roads")
                        .HasForeignKey("RoadTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RoadType");
                });

            modelBuilder.Entity("efcoreDesign.DAL.Entity.RoadVehicle", b =>
                {
                    b.HasOne("efcoreDesign.DAL.Entity.Road", "Road")
                        .WithMany("RoadVehicles")
                        .HasForeignKey("RoadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("efcoreDesign.DAL.Entity.Vehicle", "Vehicle")
                        .WithMany("RoadVehicles")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Road");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("efcoreDesign.DAL.Entity.Vehicle", b =>
                {
                    b.HasOne("efcoreDesign.DAL.Entity.Brand", "Brand")
                        .WithMany("Vehicles")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("efcoreDesign.DAL.Entity.VehicleType", "VehicleType")
                        .WithMany("Vehicles")
                        .HasForeignKey("VehicleTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("VehicleType");
                });

            modelBuilder.Entity("efcoreDesign.DAL.Entity.VehicleModel", b =>
                {
                    b.HasOne("efcoreDesign.DAL.Entity.Brand", "Brand")
                        .WithMany("Models")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("efcoreDesign.DAL.Entity.Vehicle", "Vehicle")
                        .WithOne("VehicleModel")
                        .HasForeignKey("efcoreDesign.DAL.Entity.VehicleModel", "VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("efcoreDesign.DAL.Entity.Brand", b =>
                {
                    b.Navigation("Models");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("efcoreDesign.DAL.Entity.Road", b =>
                {
                    b.Navigation("RoadVehicles");
                });

            modelBuilder.Entity("efcoreDesign.DAL.Entity.RoadType", b =>
                {
                    b.Navigation("Roads");
                });

            modelBuilder.Entity("efcoreDesign.DAL.Entity.Vehicle", b =>
                {
                    b.Navigation("RoadVehicles");

                    b.Navigation("VehicleModel")
                        .IsRequired();
                });

            modelBuilder.Entity("efcoreDesign.DAL.Entity.VehicleType", b =>
                {
                    b.Navigation("Vehicles");
                });
#pragma warning restore 612, 618
        }
    }
}
